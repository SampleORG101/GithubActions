name: Trigger Databricks Workflows

on:
  workflow_dispatch:
    inputs:
      system:
        description: "System"
        required: true
      region:
        description: "Region"
        required: true
      plant:
        description: "Plant"
        required: true
      table_list:
        description: "Table List"
        required: true
      ingestion_layer:
        description: "Ingestion Layer"
        required: true
      from_env:
        description: "Source Environment"
        required: true
      to_env:
        description: "Target Environment"
        required: true
      operation_type:
        description: "Operation Type (CLONE, CREATE, CLONE-CREATE)"
        required: true

jobs:
  validate-params:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          echo "Validating input parameters..."
          if [[ "${{ github.event.inputs.operation_type }}" != "CLONE" && \
                "${{ github.event.inputs.operation_type }}" != "CREATE" && \
                "${{ github.event.inputs.operation_type }}" != "CLONE-CREATE" ]]; then
            echo "Invalid operation_type: ${{ github.event.inputs.operation_type }}. Must be one of: CLONE, CREATE, CLONE-CREATE."
            exit 1
          fi
          echo "All inputs are valid."

  clone-or-create:
    needs: validate-params
    runs-on: ubuntu-latest
    environment: Prod
    steps:
      - name: Set Up Environment Variables
        id: setup-env
        run: |
          echo "Setting up environment variables..."
          FROM_ENV=$(echo "${{ github.event.inputs.from_env }}" | tr '[:lower:]' '[:upper:]')
          TO_ENV=$(echo "${{ github.event.inputs.to_env }}" | tr '[:lower:]' '[:upper:]')
          TO_Workspace_Instance=$(echo "${TO_ENV}_DATABRICKS_INSTANCE")
          FROM_Workspace_Instance=$(echo "${FROM_ENV}_DATABRICKS_INSTANCE")
          TO_Workspace_TOKEN=$(echo "${TO_ENV}_DATABRICKS_TOKEN")
          FROM_Workspace_TOKEN=$(echo "${FROM_ENV}_DATABRICKS_TOKEN")
          TO_Job_ID=$(echo "${TO_ENV}_job_id")
          FROM_Job_ID=$(echo "${FROM_ENV}_job_id")

          echo "TO_Workspace_Instance=$TO_Workspace_Instance" >> $GITHUB_ENV
          echo "FROM_Workspace_Instance=$FROM_Workspace_Instance" >> $GITHUB_ENV
          echo "TO_Workspace_TOKEN=$TO_Workspace_TOKEN" >> $GITHUB_ENV
          echo "FROM_Workspace_TOKEN=$FROM_Workspace_TOKEN" >> $GITHUB_ENV
          echo "TO_Job_ID=$TO_Job_ID" >> $GITHUB_ENV
          echo "FROM_Job_ID=$FROM_Job_ID" >> $GITHUB_ENV

      - name: Set Up Databricks Workflow Parameters
        id: setup-params
        run: |
          echo "Setting up parameters for Databricks Workflow..."
          PARAMS=$(jq -n \
            --arg system "${{ github.event.inputs.system }}" \
            --arg region "${{ github.event.inputs.region }}" \
            --arg plant "${{ github.event.inputs.plant }}" \
            --arg table_list "${{ github.event.inputs.table_list }}" \
            --arg ingestion_layer "${{ github.event.inputs.ingestion_layer }}" \
            --arg from_env "${{ github.event.inputs.from_env }}" \
            --arg to_env "${{ github.event.inputs.to_env }}" \
            '{system: $system, region: $region, plant: $plant, table_list: $table_list, ingestion_layer: $ingestion_layer, from_env: $from_env, to_env: $to_env}')
          echo "params=$PARAMS" >> $GITHUB_ENV

      - name: Trigger Databricks Workflow for CLONE
        if: startsWith(github.event.inputs.operation_type, 'CLONE')
        run: |
          echo "Triggering Databricks Workflow for CLONE..."
          curl -X POST "https://${{ secrets[env.FROM_Workspace_Instance] }}/api/2.1/jobs/run-now" \
          -H "Authorization: Bearer ${{ secrets[env.FROM_Workspace_TOKEN] }}" \
          -H "Content-Type: application/json" \
          -d '{
            "job_id": '${{ secrets[env.FROM_Job_ID] }}',
            "notebook_params": '"$PARAMS"'
          }'

      - name: Trigger Databricks Workflow for CREATE
        if: github.event.inputs.operation_type == 'CREATE' || github.event.inputs.operation_type == 'CLONE-CREATE'
        run: |
          echo "Triggering Databricks Workflow for CREATE..."
          curl -X POST "https://${{ secrets[env.TO_Workspace_Instance] }}/api/2.1/jobs/run-now" \
          -H "Authorization: Bearer ${{ secrets[env.TO_Workspace_TOKEN] }}" \
          -H "Content-Type: application/json" \
          -d '{
            "job_id": '${{ secrets[env.TO_Job_ID] }}',
            "notebook_params": '"$PARAMS"'
          }'
