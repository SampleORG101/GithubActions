name: Trigger Databricks Workflows

on:
  workflow_dispatch:
    inputs:
      SYSTEM:
        description: "System"
        required: true
      REGION:
        description: "Region"
        required: true
      PLANT:
        description: "Plant"
        required: true
      TABLE_LIST:
        description: "Table List"
        required: true
      INGESTION_LAYER:
        description: "Ingestion Layer"
        required: true
      FROM_ENV:
        description: "Source Environment"
        required: true
      TO_ENV:
        description: "Target Environment"
        required: true
      OPERATION_TYPE:
        description: "Operation Type (CLONE, CREATE, CLONE-CREATE)"
        required: true

env:
  SYSTEM: ${{ github.event.inputs.SYSTEM }} | tr '[:lower:]' '[:upper:]' 
  REGION: ${{ github.event.inputs.REGION }} | tr '[:lower:]' '[:upper:]' 
  PLANT: ${{ github.event.inputs.PLANT }} | tr '[:lower:]' '[:upper:]' 
  TABLE_LIST: ${{ github.event.inputs.TABLE_LIST }} | tr '[:lower:]' '[:upper:]' 
  INGESTION_LAYER: ${{ github.event.inputs.INGESTION_LAYER }} | tr '[:lower:]' '[:upper:]' 
  FROM_ENV: ${{ github.event.inputs.FROM_ENV }} | tr '[:lower:]' '[:upper:]' 
  TO_ENV: ${{ github.event.inputs.TO_ENV }} | tr '[:lower:]' '[:upper:]' 
  OPERATION_TYPE: ${{ github.event.inputs.OPERATION_TYPE }} | tr '[:lower:]' '[:upper:]' 

jobs:
  debug-params:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Environment Variables
        run: |
          echo "SYSTEM=${{ env.SYSTEM }}"
          echo "REGION=${{ env.REGION }}"
          echo "PLANT=${{ env.PLANT }}"
          echo "TABLE_LIST=${{ env.TABLE_LIST }}"
          echo "INGESTION_LAYER=${{ env.INGESTION_LAYER }}"
          echo "FROM_ENV=${{ env.FROM_ENV }}"
          echo "TO_ENV=${{ env.TO_ENV }}"
          echo "OPERATION_TYPE=${{ env.OPERATION_TYPE }}"

  validate-params:
    needs: debug-params
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          echo "Validating input parameters..."
          if [[ "${{ env.OPERATION_TYPE }}" != "CLONE" && \
                "${{ env.OPERATION_TYPE }}" != "CREATE" && \
                "${{ env.OPERATION_TYPE }}" != "CLONE-CREATE" ]]; then
            echo "Invalid OPERATION_TYPE: ${{ env.OPERATION_TYPE }}. Must be one of: CLONE, CREATE, CLONE-CREATE."
            exit 1
          fi
          echo "All inputs are valid."

  prepare-params:
    needs: validate-params
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Environment Variables
        id: prepare-env
        run: |
          echo "FROM_WORKSPACE_INSTANCE=${{ env.FROM_ENV }}_DATABRICKS_INSTANCE" >> $GITHUB_ENV
          echo "TO_WORKSPACE_INSTANCE=${{ env.TO_ENV }}_DATABRICKS_INSTANCE" >> $GITHUB_ENV
          echo "FROM_WORKSPACE_TOKEN=${{ env.FROM_ENV }}_DATABRICKS_TOKEN" >> $GITHUB_ENV
          echo "TO_WORKSPACE_TOKEN=${{ env.TO_ENV }}_DATABRICKS_TOKEN" >> $GITHUB_ENV
          echo "FROM_JOB_ID=${{ env.FROM_ENV }}_JOB_ID" >> $GITHUB_ENV
          echo "TO_JOB_ID=${{ env.TO_ENV }}_JOB_ID" >> $GITHUB_ENV
          echo "Prepared parameters successfully!"

  clone-or-create:
    needs: prepare-params
    runs-on: ubuntu-latest
    environment: Prod
    steps:
      - name: Trigger Databricks Workflow for CLONE
        if: env.OPERATION_TYPE == 'CLONE'
        run: |
          echo "Triggering Databricks Workflow for CLONE..."
          databricks jobs run-now \
            --job-id "${{ secrets.FROM_JOB_ID }}" \
            --notebook-params '{"system": "${{ env.SYSTEM }}", "region": "${{ env.REGION }}", "plant": "${{ env.PLANT }}", "table_list": "${{ env.TABLE_LIST }}", "ingestion_layer": "${{ env.INGESTION_LAYER }}", "from_env": "${{ env.FROM_ENV }}", "to_env": "${{ env.TO_ENV }}", "operation_type": "CLONE"}'

      - name: Trigger Databricks Workflow for CREATE
        if: env.OPERATION_TYPE == 'CREATE' || env.OPERATION_TYPE == 'CLONE-CREATE'
        run: |
          echo "Triggering Databricks Workflow for CREATE..."
          databricks jobs run-now \
            --job-id "${{ secrets.TO_JOB_ID }}" \
            --notebook-params '{"system": "${{ env.SYSTEM }}", "region": "${{ env.REGION }}", "plant": "${{ env.PLANT }}", "table_list": "${{ env.TABLE_LIST }}", "ingestion_layer": "${{ env.INGESTION_LAYER }}", "from_env": "${{ env.FROM_ENV }}", "to_env": "${{ env.TO_ENV }}", "operation_type": "CREATE"}'
